@page
@model LemonMES.Pages.UnitOperabilityStatusModel
@{
    ViewData["Title"] = "Unit Operability Status";
}

<div class="container">
<h1>Unit Operability</h1>
<p>Update the status of all unit operations at the plant.</p>
</div>


    <div class="pdf-container">
        <div class="pdf-content">
            <img src="Images/BFDAkers.png" width="100%" height="100%" style="border: none;"></img>
        </div>
        @foreach (var unit in Enum.GetValues(typeof(LemonMES.Models.Product.ProdStage)))
        {
            var stage = (LemonMES.Models.Product.ProdStage)unit;
            <button id="btn-@stage"
                class="unit-status-btn @(Model.UnitStatuses.ContainsKey(stage) && Model.UnitStatuses[stage] == 1 ? "active" : "inactive")"
                onclick="toggleUnitStatus('@stage')"
                style="top: @(Model.ButtonPositions.ContainsKey(stage) ? Model.ButtonPositions[stage].Top + "px" : "0");
                     left: @(Model.ButtonPositions.ContainsKey(stage) ? Model.ButtonPositions[stage].Left + "px" : "0");">
              @(Model.UnitStatuses.ContainsKey(stage) && Model.UnitStatuses[stage] == 1 ? "Active" : "Inactive")
            </button>
        }
    </div>

<footer>
    <p>Powered by LemonMES</p>
</footer>

<script>
function toggleUnitStatus(stage) {
    fetch(`/api/UnitOperability/ToggleUnitStatus?stage=${stage}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const button = document.getElementById(`btn-${stage}`);
                button.style.backgroundColor = data.isActive ? 'green' : 'red';
                button.textContent = data.isActive ? 'Active' : 'Inactive';
            } else {
                alert('Failed to toggle unit status.');
            }
        })
        .catch(error => console.error('Error toggling unit status:', error));
}
</script>

<style>
    .pdf-container {
        position: relative;
        width: 1024px; /* Set the desired fixed width */
        height: 576px; /* Set the desired fixed height (maintaining a 16:9 aspect ratio) */
        margin: 0 auto; /* Center the container horizontally */
        overflow: hidden;
    }

    .pdf-content {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
    }

        .pdf-content img {
            width: 100%;
            height: 100%;
            border: none;
        }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        text-align: center;
        margin-bottom: 30px;
    }

    .unit-status-btn {
        position: absolute;
        width: 65px;
        height: 30px;
        background-color: #ccc;
        border: none;
        cursor: pointer;
        color: #fff;
        font-weight: bold;
        text-align: center;
        line-height: 30px;
        border-radius: 5px;
        transition: background-color 0.3s ease;
        font-size: 14px;
    }

        .unit-status-btn:hover {
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        }

        .unit-status-btn.active {
            background-color: green;
        }

        .unit-status-btn.inactive {
            background-color: red;
        }
</style>